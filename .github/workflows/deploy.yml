name: Deploy DigiMall Admin App to EC2

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: digimall-admin

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Docker Image
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    outputs:
      image-tag: ${{ steps.get-timestamp.outputs.timestamp }}-${{ steps.get-commit-hash.outputs.sha_short }}
      image-uri: ${{ steps.build-image.outputs.image_uri }}
    
    steps:
    - name: Notify Slack - Pipeline Started
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "attachments": [{
            "color": "#36a64f",
            "blocks": [{
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "üöÄ DigiMall Admin Deployment Pipeline Started"
              }
            }, {
              "type": "section",
              "fields": [{
                "type": "mrkdwn",
                "text": "*Triggered by:*\n${{ github.actor }}"
              }, {
                "type": "mrkdwn",
                "text": "*Branch:*\n${{ github.ref_name }}"
              }, {
                "type": "mrkdwn",
                "text": "*Pipeline:*\n#${{ github.run_number }}"
              }, {
                "type": "mrkdwn",
                "text": "*Status:*\nBuilding Docker image"
              }]
            }, {
              "type": "actions",
              "elements": [{
                "type": "button",
                "text": {
                  "type": "plain_text",
                  "text": "View Pipeline"
                },
                "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }]
            }]
          }]
        }' \
        ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get commit hash
      id: get-commit-hash
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Get timestamp
      id: get-timestamp
      run: echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.get-timestamp.outputs.timestamp }}-${{ steps.get-commit-hash.outputs.sha_short }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --target runner .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Also tag as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output the full image URI
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY" >> $GITHUB_OUTPUT

    - name: Notify Slack - Docker Build Success
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "attachments": [{
            "color": "#36a64f",
            "blocks": [{
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "‚úÖ *Docker Image Built Successfully*\nImage: `${{ steps.get-timestamp.outputs.timestamp }}-${{ steps.get-commit-hash.outputs.sha_short }}`\nStarting EC2 deployment..."
              }
            }]
          }]
        }' \
        ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack - Starting Deployment
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"üü¢ **Starting EC2 Deployment**\nServer: `${{ secrets.EC2_HOST }}`\nImage: `${{ needs.build.outputs.image-tag }}`"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to EC2
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Copy docker-compose.prod.yml to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        source: "docker-compose.prod.yml"
        target: "${{ secrets.EC2_ADMIN_APP_PATH }}/"
        strip_components: 0

    - name: Setup EC2 Environment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "üìÅ Setting up admin application directory..."
          mkdir -p ${{ secrets.EC2_ADMIN_APP_PATH }}/logs
          cd ${{ secrets.EC2_ADMIN_APP_PATH }}
          echo "‚úÖ Admin application directory ready"

    - name: Generate Environment Configuration
      uses: appleboy/ssh-action@v1.0.3
      env:
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXT_PUBLIC_BACKEND_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
        NEXT_PUBLIC_WS_URL: ${{ secrets.NEXT_PUBLIC_WS_URL }}
        SETUP_TOKEN: ${{ secrets.SETUP_TOKEN }}
        ADMIN_SETUP_TOKEN: ${{ secrets.ADMIN_SETUP_TOKEN }}
        NODE_ENV: production
        PORT: 4300
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        envs: NEXTAUTH_URL,NEXTAUTH_SECRET,NEXT_PUBLIC_BACKEND_URL,NEXT_PUBLIC_WS_URL,SETUP_TOKEN,ADMIN_SETUP_TOKEN,NODE_ENV,PORT
        script: |
          cd ${{ secrets.EC2_ADMIN_APP_PATH }}
          echo "üîß Generating production .env.admin file..."
          cat > .env.admin << EOF
          # Production Environment Configuration - Generated from GitHub Secrets
          NODE_ENV=${NODE_ENV}
          PORT=${PORT}
          
          # NextAuth Configuration
          NEXTAUTH_URL=${NEXTAUTH_URL}
          NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
          
          # Backend API Configuration
          NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
          
          # WebSocket Configuration
          NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
          
          # Setup Tokens
          SETUP_TOKEN=${SETUP_TOKEN}
          ADMIN_SETUP_TOKEN=${ADMIN_SETUP_TOKEN}
          
          # Application Configuration
          APP_NAME='DigiMall Admin Portal'
          APP_VERSION=1.0.0
          APP_DESCRIPTION='DigiMall admin management portal'
          EOF
          
          # Create symlink for .env (Docker Compose expects .env)
          ln -sf .env.admin .env
          echo "‚úÖ Environment configuration ready"

    - name: Login to ECR
      uses: appleboy/ssh-action@v1.0.3
      env:
        ECR_REPOSITORY_URI: ${{ needs.build.outputs.image-uri }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        envs: ECR_REPOSITORY_URI,AWS_DEFAULT_REGION
        script: |
          cd ${{ secrets.EC2_ADMIN_APP_PATH }}
          echo "üîê Logging into Amazon ECR..."
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI
          echo "‚úÖ ECR login successful"

    - name: Pull Docker Image
      uses: appleboy/ssh-action@v1.0.3
      env:
        ECR_REPOSITORY_URI: ${{ needs.build.outputs.image-uri }}
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        envs: ECR_REPOSITORY_URI,IMAGE_TAG
        script: |
          cd ${{ secrets.EC2_ADMIN_APP_PATH }}
          echo "üì¶ Pulling Docker image: $ECR_REPOSITORY_URI:$IMAGE_TAG"
          docker pull $ECR_REPOSITORY_URI:$IMAGE_TAG
          echo "‚úÖ Docker image pulled successfully"

    - name: Stop Existing Containers
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd ${{ secrets.EC2_ADMIN_APP_PATH }}
          echo "üõë Stopping existing DigiMall Admin containers..."
          docker-compose -f docker-compose.prod.yml down --timeout 30 || echo "No DigiMall Admin containers to stop"
          
          echo "üîç Checking for port conflicts..."
          # Check and warn about port conflicts but don't stop other services
          if docker ps | grep -q ":4300->"; then
            echo "‚ö†Ô∏è  Warning: Port 4300 is in use by another service. DigiMall Admin will use alternative port."
          fi
          echo "‚úÖ Port conflict check completed"

    - name: Start Application
      uses: appleboy/ssh-action@v1.0.3
      env:
        ECR_REPOSITORY_URI: ${{ needs.build.outputs.image-uri }}
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        envs: ECR_REPOSITORY_URI,IMAGE_TAG
        script: |
          cd ${{ secrets.EC2_ADMIN_APP_PATH }}
          echo "üöÄ Starting application containers..."
          echo "Using image: $ECR_REPOSITORY_URI:$IMAGE_TAG"
          
          # Update docker-compose.prod.yml with the specific image tag
          sed -i "s|image: .*|image: $ECR_REPOSITORY_URI:$IMAGE_TAG|g" docker-compose.prod.yml
          
          docker-compose -f docker-compose.prod.yml up -d
          
          # Check if containers actually started
          sleep 5
          RUNNING_CONTAINERS=$(docker-compose -f docker-compose.prod.yml ps --services --filter "status=running" | wc -l)
          if [ "$RUNNING_CONTAINERS" -eq 0 ]; then
            echo "‚ùå No containers are running! Deployment failed."
            docker-compose -f docker-compose.prod.yml logs
            exit 1
          fi
          echo "‚úÖ Application containers started successfully"

    - name: Cleanup Old Images
      uses: appleboy/ssh-action@v1.0.3
      env:
        ECR_REPOSITORY_URI: ${{ needs.build.outputs.image-uri }}
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        envs: ECR_REPOSITORY_URI,IMAGE_TAG
        script: |
          cd ${{ secrets.EC2_ADMIN_APP_PATH }}
          echo "üßπ Cleaning up old Docker images..."
          # Keep only the current image and remove others for the same repository
          docker images "$ECR_REPOSITORY_URI" --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | tail -n +2 | grep -v "$IMAGE_TAG" | awk '{print $2}' | xargs -r docker rmi || echo "No old images to remove"
          echo "‚úÖ Image cleanup completed"

    - name: Wait for Application Startup
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd ${{ secrets.EC2_ADMIN_APP_PATH }}
          echo "‚è≥ Waiting for application to start up..."
          sleep 30
          echo "üìä Checking container status..."
          docker-compose -f docker-compose.prod.yml ps
          
          # Verify containers are actually healthy
          UNHEALTHY_CONTAINERS=$(docker-compose -f docker-compose.prod.yml ps --filter "status=running" | grep -c "unhealthy\|starting" || echo "0")
          if [ "$UNHEALTHY_CONTAINERS" -gt 0 ]; then
            echo "‚ö†Ô∏è Some containers are not healthy yet"
            docker-compose -f docker-compose.prod.yml logs --tail=20
          fi

    - name: Notify Slack - Deployment Progress
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"üü¢ **Admin App Deployment Progress** ‚úÖ\nContainers started, performing health checks..."}' \
        "${{ secrets.SLACK_WEBHOOK_URL }}"

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "Verifying deployment..."
          cd ${{ secrets.EC2_ADMIN_APP_PATH }}
          
          # Check if containers are running
          docker-compose -f docker-compose.prod.yml ps
          
          # Test basic connectivity
          HEALTH_STATUS=0
          for i in {1..5}; do
            if curl -f http://localhost:4300; then
              echo "‚úÖ Application is accessible!"
              HEALTH_STATUS=1
              break
            else
              echo "‚è≥ Attempt $i/5: Application not ready yet, waiting..."
              sleep 10
            fi
          done
          
          # Send health check metric to CloudWatch
          aws cloudwatch put-metric-data \
            --region us-east-1 \
            --namespace "DigiMall/AdminApp/HealthCheck" \
            --metric-data MetricName=StatusCheck,Value=$HEALTH_STATUS,Unit=None
          
          if [ $HEALTH_STATUS -eq 0 ]; then
            echo "‚ùå Health check failed - sending alert"
            aws cloudwatch put-metric-data \
              --region us-east-1 \
              --namespace "DigiMall/AdminApp/HealthCheck" \
              --metric-data MetricName=StatusCheck,Value=0,Unit=None
            exit 1
          fi
          
          # Show recent logs
          echo "Recent application logs:"
          docker-compose -f docker-compose.prod.yml logs --tail=20 app

    - name: Notify Slack - Deployment Result
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "attachments": [{
              "color": "#36a64f",
              "blocks": [{
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "üéâ DigiMall Admin App Deployment Successful"
                }
              }, {
                "type": "section",
                "fields": [{
                  "type": "mrkdwn",
                  "text": "*Environment:*\nProduction"
                }, {
                  "type": "mrkdwn",
                  "text": "*Image:*\n`${{ needs.build.outputs.image-tag }}`"
                }, {
                  "type": "mrkdwn",
                  "text": "*Port:*\n4300"
                }, {
                  "type": "mrkdwn",
                  "text": "*Pipeline:*\n#${{ github.run_number }}"
                }]
              }, {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Application URLs:*\n‚Ä¢ Admin Portal: <https://admin.digimall.ng|DigiMall Admin Portal>\n‚Ä¢ Server: <http://ec2-13-221-110-58.compute-1.amazonaws.com:4300|Direct Server Access>"
                }
              }, {
                "type": "actions",
                "elements": [{
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View Logs"
                  },
                  "url": "https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logsV2:log-groups/log-group/$252Faws$252Fec2$252Fdigimall-admin"
                }, {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "Access Portal"
                  },
                  "url": "https://admin.digimall.ng"
                }]
              }]
            }]
          }' \
          "${{ secrets.SLACK_WEBHOOK_URL }}"
        else
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "attachments": [{
              "color": "#ff0000",
              "blocks": [{
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "üö® DigiMall Admin App Deployment Failed"
                }
              }, {
                "type": "section",
                "fields": [{
                  "type": "mrkdwn",
                  "text": "*Pipeline:*\n#${{ github.run_number }}"
                }, {
                  "type": "mrkdwn",
                  "text": "*Branch:*\n${{ github.ref_name }}"
                }, {
                  "type": "mrkdwn",
                  "text": "*Triggered by:*\n${{ github.actor }}"
                }, {
                  "type": "mrkdwn",
                  "text": "*Status:*\nFAILED ‚ùå"
                }]
              }, {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "‚ö†Ô∏è *DigiMall Admin Portal needs immediate attention!*"
                }
              }, {
                "type": "actions",
                "elements": [{
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View Failed Pipeline"
                  },
                  "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }, {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "SSH to Server"
                  },
                  "url": "ssh://ubuntu@ec2-13-221-110-58.compute-1.amazonaws.com"
                }]
              }]
            }]
          }' \
          "${{ secrets.SLACK_WEBHOOK_URL }}"
        fi
      if: always()