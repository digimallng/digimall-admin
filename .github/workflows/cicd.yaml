name: admin panel pipeline
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Send Message to Cliq
        uses: ./.github/actions/notify-cliq
        with:
          CLIQ_URL: ${{ secrets.CLIQ_URL }}
          MESSAGE: |
            !Admin-Panel~${{ github.ref_name }} (${{ github.run_number }})

      - name: Send Message to Cliq - Starting deployment
        uses: ./.github/actions/notify-cliq
        with:
          CLIQ_URL: ${{ secrets.CLIQ_URL }}
          MESSAGE: |
            Starting Pipeline üöÄ (${{ github.run_number }})


  build-scan-push:
    runs-on: ubuntu-latest
    env:
      IMAGE_URI: ${{ secrets.REGISTRY }}/${{ secrets.ECR_REPOSITORY}}
      IMAGE_TAG: admin-panel

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create .env file
        run: |
          echo "NEXTAUTH_URL=${{secrets.NEXTAUTH_URL}}" > .env
          echo "NEXTAUTH_SECRET=${{secrets.NEXTAUTH_SECRET}}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{secrets.NEXT_PUBLIC_API_URL}}" >> .env
          echo "ADMIN_SERVICE_URL=${{secrets.ADMIN_SERVICE_URL}}" >> .env
          echo "NEXT_PUBLIC_CHAT_WS_URL=${{secrets.NEXT_PUBLIC_CHAT_WS_URL}}" >> .env

          

      - name: Build and tag Docker image
        id: building-main
        run: |
          docker build -t ${{env.IMAGE_URI }}:${{env.IMAGE_TAG }} .
        continue-on-error: true

      - name: Send Message to Space on successful build
        if: steps.building-main.outcome == 'success'
        uses: ./.github/actions/notify-cliq
        with:
          ClIQ_URL: ${{ secrets.CLIQ_URL}}
          MESSAGE: |
            Docker build complete üê≥ (${{ github.run_number }})

      - name: Send Message to cliq for Docker build fail
        if: steps.building-main.outcome  == 'failure'
        uses: ./.github/actions/notify-cliq
        with:
          ClIQ_URL: ${{ secrets.CLIQ_URL}}
          MESSAGE: |
            [Failed Docker build](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) ‚ùå (${{ github.run_number }})

      - name: Exit pipeline on build fail
        if: steps.building-main.outcome  == 'failure'
        run: |
          echo "Build failed. Exiting pipeline."
          exit 1

      - name: Push Docker Image
        id: push-main
        run: |
          docker push ${{env.IMAGE_URI }}:${{env.IMAGE_TAG }}
        continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    needs: build-scan-push
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      IMAGE_URI: ${{ secrets.REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:admin-panel
      PORT_MAP: "3300:3300"
      SERVICE_NAME: "admin-panel"
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.2.0
        id: deploying
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER}}
          key: ${{ secrets.EC2_SSH_KEY}}
          port: ${{ secrets.PORT}}

          script: |
            # Configure AWS CLI on the EC2 instance
            aws ecr get-login-password --region ${{ secrets.AWS_REGION}} | docker login --username AWS --password-stdin ${{ secrets.REGISTRY}}
            echo "Pulling Docker image: ${{ env.IMAGE_URI}}"
            docker pull ${{ env.IMAGE_URI}}
            echo "Stopping existing container (if any)..."
            docker stop ${{env.SERVICE_NAME}}|| true
            docker rm ${{env.SERVICE_NAME}} || true
            echo "Running new container..."
            docker run -d --restart always --env-file .env-${{env.SERVICE_NAME}} --name ${{env.SERVICE_NAME}} -p ${{ env.PORT_MAP}} ${{ env.IMAGE_URI}}
            docker system prune --all --force || true

      - name: Send Message to cliq on successul deployment
        if: steps.deploying.outcome  == 'success'
        uses: ./.github/actions/notify-cliq
        with:
          ClIQ_URL: ${{ secrets.CLIQ_URL}}
          MESSAGE: |
            [Succesful Deployment](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) ‚úÖ (${{ github.run_number }})

      - name: Send Message to cliq on failed deployment
        if: steps.deploying.outcome  == 'failure'
        uses: ./.github/actions/notify-cliq
        with:
          ClIQ_URL: ${{ secrets.CLIQ_URL}}
          MESSAGE: |
            [Failed Deployment](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) ‚ùå (${{ github.run_number }})

      - name: Send Message to Cliq
        uses: ./.github/actions/notify-cliq
        with:
          ClIQ_URL: ${{ secrets.CLIQ_URL }}
          MESSAGE: |
            ---
