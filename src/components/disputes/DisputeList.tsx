'use client';\n\nimport { useState } from 'react';\nimport { format } from 'date-fns';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Download,\n  Eye,\n  Filter,\n  Flag,\n  Loader2,\n  MoreVertical,\n  RefreshCw,\n  Search,\n  User,\n  XCircle,\n  Package,\n  MapPin,\n  DollarSign,\n  Shield,\n  FileText,\n} from 'lucide-react';\nimport {\n  useDisputes,\n  useUpdateDispute,\n  useResolveDispute,\n  useBulkDisputeAction,\n  useExportDisputes,\n} from '@/lib/hooks/use-disputes';\nimport type {\n  Dispute,\n  DisputeFilter,\n  DisputeStatus,\n  DisputeType,\n  DisputePriority,\n} from '@/lib/api/types/dispute.types';\nimport { cn } from '@/lib/utils/cn';\n\ninterface DisputeListProps {\n  onDisputeSelect?: (dispute: Dispute) => void;\n  selectedDisputes?: string[];\n  onSelectedDisputesChange?: (disputeIds: string[]) => void;\n  className?: string;\n}\n\nconst statusOptions = [\n  { value: 'all', label: 'All Status' },\n  { value: 'open', label: 'Open' },\n  { value: 'under_review', label: 'Under Review' },\n  { value: 'investigating', label: 'Investigating' },\n  { value: 'resolved', label: 'Resolved' },\n  { value: 'escalated', label: 'Escalated' },\n  { value: 'closed', label: 'Closed' },\n];\n\nconst typeOptions = [\n  { value: 'all', label: 'All Types' },\n  { value: 'order_not_received', label: 'Order Not Received' },\n  { value: 'item_not_as_described', label: 'Item Not As Described' },\n  { value: 'damaged_item', label: 'Damaged Item' },\n  { value: 'quality_issue', label: 'Quality Issue' },\n  { value: 'refund_request', label: 'Refund Request' },\n  { value: 'delivery_issue', label: 'Delivery Issue' },\n  { value: 'service_issue', label: 'Service Issue' },\n  { value: 'fraud_complaint', label: 'Fraud Complaint' },\n  { value: 'other', label: 'Other' },\n];\n\nconst priorityOptions = [\n  { value: 'all', label: 'All Priorities' },\n  { value: 'low', label: 'Low' },\n  { value: 'medium', label: 'Medium' },\n  { value: 'high', label: 'High' },\n  { value: 'urgent', label: 'Urgent' },\n];\n\nconst statusColors = {\n  open: 'bg-blue-100 text-blue-800',\n  under_review: 'bg-yellow-100 text-yellow-800',\n  investigating: 'bg-yellow-100 text-yellow-800',\n  resolved: 'bg-green-100 text-green-800',\n  escalated: 'bg-red-100 text-red-800',\n  closed: 'bg-gray-100 text-gray-800',\n};\n\nconst priorityColors = {\n  low: 'bg-green-100 text-green-800',\n  medium: 'bg-yellow-100 text-yellow-800',\n  high: 'bg-orange-100 text-orange-800',\n  urgent: 'bg-red-100 text-red-800',\n};\n\nconst statusIcons = {\n  open: AlertTriangle,\n  under_review: Eye,\n  investigating: Eye,\n  resolved: CheckCircle,\n  escalated: Flag,\n  closed: XCircle,\n};\n\nconst typeIcons = {\n  order_not_received: MapPin,\n  item_not_as_described: Package,\n  damaged_item: Package,\n  quality_issue: Package,\n  refund_request: DollarSign,\n  delivery_issue: MapPin,\n  service_issue: User,\n  fraud_complaint: Shield,\n  other: AlertTriangle,\n};\n\nexport function DisputeList({\n  onDisputeSelect,\n  selectedDisputes = [],\n  onSelectedDisputesChange,\n  className,\n}: DisputeListProps) {\n  const [filter, setFilter] = useState<DisputeFilter>({\n    page: 1,\n    limit: 20,\n    sortBy: 'updatedAt',\n    sortOrder: 'desc',\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [priorityFilter, setPriorityFilter] = useState('all');\n\n  // Build complete filter\n  const completeFilter: DisputeFilter = {\n    ...filter,\n    searchTerm: searchTerm || undefined,\n    status: statusFilter !== 'all' ? (statusFilter as DisputeStatus) : undefined,\n    type: typeFilter !== 'all' ? (typeFilter as DisputeType) : undefined,\n    priority: priorityFilter !== 'all' ? (priorityFilter as DisputePriority) : undefined,\n  };\n\n  // API hooks\n  const { disputes, isLoading, error, refetch } = useDisputes(completeFilter);\n  const updateDisputeMutation = useUpdateDispute();\n  const resolveDisputeMutation = useResolveDispute();\n  const bulkActionMutation = useBulkDisputeAction();\n  const exportMutation = useExportDisputes();\n\n  const handleFilterChange = (newFilter: Partial<DisputeFilter>) => {\n    setFilter(prev => ({ ...prev, ...newFilter, page: 1 }));\n  };\n\n  const handleSearchChange = (search: string) => {\n    setSearchTerm(search);\n    setFilter(prev => ({ ...prev, page: 1 }));\n  };\n\n  const handleStatusFilterChange = (status: string) => {\n    setStatusFilter(status);\n    setFilter(prev => ({ ...prev, page: 1 }));\n  };\n\n  const handleTypeFilterChange = (type: string) => {\n    setTypeFilter(type);\n    setFilter(prev => ({ ...prev, page: 1 }));\n  };\n\n  const handlePriorityFilterChange = (priority: string) => {\n    setPriorityFilter(priority);\n    setFilter(prev => ({ ...prev, page: 1 }));\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked && disputes?.disputes) {\n      const allIds = disputes.disputes.map(d => d.id);\n      onSelectedDisputesChange?.(allIds);\n    } else {\n      onSelectedDisputesChange?.([]);\n    }\n  };\n\n  const handleSelectDispute = (disputeId: string, checked: boolean) => {\n    if (checked) {\n      onSelectedDisputesChange?.([...selectedDisputes, disputeId]);\n    } else {\n      onSelectedDisputesChange?.(selectedDisputes.filter(id => id !== disputeId));\n    }\n  };\n\n  const handleBulkAction = async (action: string) => {\n    if (selectedDisputes.length === 0) return;\n\n    try {\n      await bulkActionMutation.mutateAsync({\n        disputeIds: selectedDisputes,\n        action: action as any,\n      });\n      onSelectedDisputesChange?.([]);\n      refetch();\n    } catch (error) {\n      console.error('Bulk action failed:', error);\n    }\n  };\n\n  const handleExport = async (format: 'csv' | 'xlsx' | 'pdf') => {\n    try {\n      await exportMutation.mutateAsync({\n        filter: completeFilter,\n        format,\n      });\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  const handleQuickAction = async (disputeId: string, action: 'investigate' | 'resolve') => {\n    try {\n      if (action === 'investigate') {\n        await updateDisputeMutation.mutateAsync({\n          disputeId,\n          data: { status: 'investigating' as DisputeStatus },\n        });\n      } else if (action === 'resolve') {\n        await resolveDisputeMutation.mutateAsync({\n          disputeId,\n          data: {\n            resolution: 'no_action',\n            resolutionNotes: 'Quick resolved by admin',\n            notifyCustomer: true,\n            notifyVendor: true,\n          },\n        });\n      }\n      refetch();\n    } catch (error) {\n      console.error('Quick action failed:', error);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-NG', {\n      style: 'currency',\n      currency: 'NGN',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatusIcon = (status: DisputeStatus) => {\n    return statusIcons[status] || Clock;\n  };\n\n  const getTypeIcon = (type: DisputeType) => {\n    return typeIcons[type] || AlertTriangle;\n  };\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Filter className=\"h-5 w-5\" />\n                <span>Dispute Filters</span>\n              </CardTitle>\n              <CardDescription>\n                Filter and search disputes by various criteria\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => refetch()}\n                disabled={isLoading}\n              >\n                <RefreshCw className={cn('h-4 w-4 mr-2', isLoading && 'animate-spin')} />\n                Refresh\n              </Button>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent>\n                  <DropdownMenuItem onClick={() => handleExport('csv')}>\n                    Export as CSV\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => handleExport('xlsx')}>\n                    Export as Excel\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => handleExport('pdf')}>\n                    Export as PDF\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col lg:flex-row gap-4 items-start lg:items-center\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400\" />\n                <Input\n                  placeholder=\"Search disputes by ID, customer, vendor, or subject...\"\n                  value={searchTerm}\n                  onChange={(e) => handleSearchChange(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-3\">\n              <Select value={statusFilter} onValueChange={handleStatusFilterChange}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {statusOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <Select value={typeFilter} onValueChange={handleTypeFilterChange}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {typeOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <Select value={priorityFilter} onValueChange={handlePriorityFilterChange}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {priorityOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bulk Actions */}\n      {selectedDisputes.length > 0 && (\n        <Card>\n          <CardContent className=\"py-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">\n                {selectedDisputes.length} dispute(s) selected\n              </span>\n              <div className=\"flex items-center space-x-2\">\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                      Bulk Actions\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent>\n                    <DropdownMenuItem onClick={() => handleBulkAction('assign')}>\n                      Assign to Me\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => handleBulkAction('update_status')}>\n                      Update Status\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => handleBulkAction('update_priority')}>\n                      Update Priority\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onSelectedDisputesChange?.([])}\n                >\n                  Clear Selection\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Disputes Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Disputes</CardTitle>\n              <CardDescription>\n                {isLoading\n                  ? 'Loading disputes...'\n                  : `${disputes?.total || 0} dispute(s) found`}\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"h-16 bg-gray-200 rounded\" />\n                </div>\n              ))}\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-12 text-red-600\">\n              <AlertTriangle className=\"h-12 w-12 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Error Loading Disputes</h3>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                {error?.message || 'Failed to load disputes'}\n              </p>\n              <Button onClick={() => refetch()} variant=\"outline\">\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Try Again\n              </Button>\n            </div>\n          ) : disputes?.disputes.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No Disputes Found</h3>\n              <p className=\"text-sm\">No disputes match your current filters</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\">\n                      <Checkbox\n                        checked={selectedDisputes.length === disputes?.disputes.length}\n                        onCheckedChange={handleSelectAll}\n                      />\n                    </TableHead>\n                    <TableHead>Reference</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Vendor</TableHead>\n                    <TableHead>Subject</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Priority</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {disputes?.disputes.map((dispute) => {\n                    const StatusIcon = getStatusIcon(dispute.status);\n                    const TypeIcon = getTypeIcon(dispute.type);\n                    const isSelected = selectedDisputes.includes(dispute.id);\n\n                    return (\n                      <TableRow\n                        key={dispute.id}\n                        className={cn(\n                          'cursor-pointer hover:bg-gray-50',\n                          isSelected && 'bg-blue-50'\n                        )}\n                        onClick={() => onDisputeSelect?.(dispute)}\n                      >\n                        <TableCell onClick={(e) => e.stopPropagation()}>\n                          <Checkbox\n                            checked={isSelected}\n                            onCheckedChange={(checked) =>\n                              handleSelectDispute(dispute.id, checked as boolean)\n                            }\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          {dispute.reference}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <User className=\"h-4 w-4 text-gray-500\" />\n                            <span>{dispute.customer.name}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <User className=\"h-4 w-4 text-gray-500\" />\n                            <span>{dispute.vendor.name}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"max-w-xs truncate block\" title={dispute.subject}>\n                            {dispute.subject}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <TypeIcon className=\"h-4 w-4 text-gray-500\" />\n                            <span className=\"capitalize\">\n                              {dispute.type.replace(/_/g, ' ')}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          {formatCurrency(dispute.amount)}\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={priorityColors[dispute.priority]}>\n                            {dispute.priority.toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={statusColors[dispute.status]}>\n                            <StatusIcon className=\"h-3 w-3 mr-1\" />\n                            {dispute.status.replace(/_/g, ' ').toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-gray-600\">\n                          {format(new Date(dispute.createdAt), 'MMM dd, yyyy')}\n                        </TableCell>\n                        <TableCell onClick={(e) => e.stopPropagation()}>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => onDisputeSelect?.(dispute)}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            \n                            {dispute.status === 'open' && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleQuickAction(dispute.id, 'investigate')}\n                                disabled={updateDisputeMutation.isLoading}\n                              >\n                                {updateDisputeMutation.isLoading ? (\n                                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4\" />\n                                )}\n                              </Button>\n                            )}\n                            \n                            {dispute.status === 'investigating' && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleQuickAction(dispute.id, 'resolve')}\n                                disabled={resolveDisputeMutation.isLoading}\n                              >\n                                {resolveDisputeMutation.isLoading ? (\n                                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                ) : (\n                                  <CheckCircle className=\"h-4 w-4\" />\n                                )}\n                              </Button>\n                            )}\n                            \n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <MoreVertical className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent>\n                                <DropdownMenuItem onClick={() => onDisputeSelect?.(dispute)}>\n                                  View Details\n                                </DropdownMenuItem>\n                                <DropdownMenuItem>\n                                  Assign to Me\n                                </DropdownMenuItem>\n                                <DropdownMenuItem>\n                                  Add Note\n                                </DropdownMenuItem>\n                                {dispute.status === 'open' && (\n                                  <DropdownMenuItem>\n                                    Escalate\n                                  </DropdownMenuItem>\n                                )}\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n\n              {/* Pagination */}\n              {disputes && disputes.totalPages > 1 && (\n                <div className=\"flex items-center justify-between px-2 py-4\">\n                  <div className=\"text-sm text-gray-700\">\n                    Showing {((disputes.page - 1) * disputes.limit) + 1} to{' '}\n                    {Math.min(disputes.page * disputes.limit, disputes.total)} of{' '}\n                    {disputes.total} results\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleFilterChange({ page: Math.max(1, filter.page! - 1) })}\n                      disabled={filter.page! <= 1 || isLoading}\n                    >\n                      Previous\n                    </Button>\n                    <span className=\"text-sm text-gray-700\">\n                      Page {filter.page} of {disputes.totalPages}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleFilterChange({ page: Math.min(disputes.totalPages, filter.page! + 1) })}\n                      disabled={filter.page! >= disputes.totalPages || isLoading}\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}