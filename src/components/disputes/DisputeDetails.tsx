'use client';\n\nimport { useState } from 'react';\nimport { format } from 'date-fns';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/Card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/Textarea';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport {\n  AlertTriangle,\n  Calendar,\n  Clock,\n  Download,\n  Eye,\n  FileText,\n  Flag,\n  Gavel,\n  Mail,\n  MessageCircle,\n  MoreVertical,\n  Paperclip,\n  Phone,\n  Send,\n  Shield,\n  User,\n  CheckCircle,\n  XCircle,\n  Loader2,\n  Upload,\n  Trash2,\n} from 'lucide-react';\nimport {\n  useDispute,\n  useUpdateDispute,\n  useResolveDispute,\n  useEscalateDispute,\n  useAddDisputeResponse,\n  useUploadEvidence,\n  useDeleteEvidence,\n} from '@/lib/hooks/use-disputes';\nimport type {\n  Dispute,\n  DisputeStatus,\n  DisputePriority,\n  DisputeResolution,\n  UpdateDisputeRequest,\n  ResolveDisputeRequest,\n  EscalateDisputeRequest,\n  DisputeResponseRequest,\n} from '@/lib/api/types/dispute.types';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils/cn';\n\ninterface DisputeDetailsProps {\n  disputeId: string;\n  onClose?: () => void;\n  className?: string;\n}\n\nconst statusColors = {\n  open: 'bg-blue-100 text-blue-800',\n  under_review: 'bg-yellow-100 text-yellow-800',\n  investigating: 'bg-yellow-100 text-yellow-800',\n  resolved: 'bg-green-100 text-green-800',\n  escalated: 'bg-red-100 text-red-800',\n  closed: 'bg-gray-100 text-gray-800',\n};\n\nconst priorityColors = {\n  low: 'bg-green-100 text-green-800',\n  medium: 'bg-yellow-100 text-yellow-800',\n  high: 'bg-orange-100 text-orange-800',\n  urgent: 'bg-red-100 text-red-800',\n};\n\nexport function DisputeDetails({ disputeId, onClose, className }: DisputeDetailsProps) {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [isEditing, setIsEditing] = useState(false);\n  const [showResolutionForm, setShowResolutionForm] = useState(false);\n  const [showEscalationForm, setShowEscalationForm] = useState(false);\n  const [newResponse, setNewResponse] = useState('');\n  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);\n  \n  // Form states\n  const [editData, setEditData] = useState<UpdateDisputeRequest>({});\n  const [resolutionData, setResolutionData] = useState<ResolveDisputeRequest>({\n    resolution: 'no_action' as DisputeResolution,\n    resolutionNotes: '',\n    notifyCustomer: true,\n    notifyVendor: true,\n  });\n  const [escalationData, setEscalationData] = useState<EscalateDisputeRequest>({\n    escalationReason: '',\n    escalationNotes: '',\n    requiresManagerApproval: true,\n  });\n\n  // API hooks\n  const { dispute, isLoading, error, refetch } = useDispute(disputeId);\n  const updateDisputeMutation = useUpdateDispute();\n  const resolveDisputeMutation = useResolveDispute();\n  const escalateDisputeMutation = useEscalateDispute();\n  const addResponseMutation = useAddDisputeResponse();\n  const uploadEvidenceMutation = useUploadEvidence();\n  const deleteEvidenceMutation = useDeleteEvidence();\n\n  const handleUpdate = async () => {\n    try {\n      await updateDisputeMutation.mutateAsync({\n        disputeId,\n        data: editData,\n      });\n      setIsEditing(false);\n      setEditData({});\n      refetch();\n    } catch (error) {\n      console.error('Failed to update dispute:', error);\n    }\n  };\n\n  const handleResolve = async () => {\n    try {\n      await resolveDisputeMutation.mutateAsync({\n        disputeId,\n        data: resolutionData,\n      });\n      setShowResolutionForm(false);\n      refetch();\n    } catch (error) {\n      console.error('Failed to resolve dispute:', error);\n    }\n  };\n\n  const handleEscalate = async () => {\n    try {\n      await escalateDisputeMutation.mutateAsync({\n        disputeId,\n        data: escalationData,\n      });\n      setShowEscalationForm(false);\n      refetch();\n    } catch (error) {\n      console.error('Failed to escalate dispute:', error);\n    }\n  };\n\n  const handleAddResponse = async () => {\n    if (!newResponse.trim()) return;\n\n    try {\n      const responseData: DisputeResponseRequest = {\n        message: newResponse,\n        isPublic: true,\n      };\n\n      if (selectedFiles && selectedFiles.length > 0) {\n        responseData.attachments = Array.from(selectedFiles);\n      }\n\n      await addResponseMutation.mutateAsync({\n        disputeId,\n        data: responseData,\n      });\n      \n      setNewResponse('');\n      setSelectedFiles(null);\n      refetch();\n    } catch (error) {\n      console.error('Failed to add response:', error);\n    }\n  };\n\n  const handleFileUpload = async (files: FileList) => {\n    for (const file of Array.from(files)) {\n      try {\n        await uploadEvidenceMutation.mutateAsync({\n          disputeId,\n          file,\n        });\n      } catch (error) {\n        console.error('Failed to upload file:', error);\n      }\n    }\n    refetch();\n  };\n\n  const handleDeleteEvidence = async (fileId: string) => {\n    try {\n      await deleteEvidenceMutation.mutateAsync({\n        disputeId,\n        fileId,\n      });\n      refetch();\n    } catch (error) {\n      console.error('Failed to delete evidence:', error);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-NG', {\n      style: 'currency',\n      currency: 'NGN',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  if (isLoading) {\n    return (\n      <div className={cn('space-y-6', className)}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !dispute) {\n    return (\n      <div className={cn('text-center py-12', className)}>\n        <AlertTriangle className=\"h-12 w-12 text-red-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Error Loading Dispute</h3>\n        <p className=\"text-gray-600 mb-4\">\n          {error?.message || 'Failed to load dispute details'}\n        </p>\n        <Button onClick={() => refetch()} variant=\"outline\">\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">\n            Dispute {dispute.reference}\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Created {format(new Date(dispute.createdAt), 'PPP')}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Badge className={statusColors[dispute.status]}>\n            {dispute.status.replace(/_/g, ' ').toUpperCase()}\n          </Badge>\n          <Badge className={priorityColors[dispute.priority]}>\n            {dispute.priority.toUpperCase()}\n          </Badge>\n          {onClose && (\n            <Button variant=\"ghost\" onClick={onClose}>\n              <XCircle className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n          <TabsTrigger value=\"evidence\">Evidence</TabsTrigger>\n          <TabsTrigger value=\"communication\">Communication</TabsTrigger>\n          <TabsTrigger value=\"actions\">Actions</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  <span>Dispute Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Order ID</Label>\n                    <p className=\"text-sm font-medium\">{dispute.orderId}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Amount</Label>\n                    <p className=\"text-sm font-medium\">{formatCurrency(dispute.amount)}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Type</Label>\n                    <p className=\"text-sm font-medium capitalize\">\n                      {dispute.type.replace(/_/g, ' ')}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Assigned To</Label>\n                    <p className=\"text-sm font-medium\">\n                      {dispute.assignedToName || 'Unassigned'}\n                    </p>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Subject</Label>\n                  <p className=\"text-sm font-medium\">{dispute.subject}</p>\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Description</Label>\n                  <p className=\"text-sm text-gray-700 bg-gray-50 p-3 rounded-md\">\n                    {dispute.description}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"h-5 w-5\" />\n                  <span>Participants</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 border rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium text-gray-900\">Customer</h4>\n                      <Badge variant=\"outline\">Customer</Badge>\n                    </div>\n                    <p className=\"text-sm font-medium\">{dispute.customer.name}</p>\n                    <p className=\"text-sm text-gray-600\">{dispute.customer.email}</p>\n                  </div>\n                  \n                  <div className=\"p-3 border rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium text-gray-900\">Vendor</h4>\n                      <Badge variant=\"outline\">Vendor</Badge>\n                    </div>\n                    <p className=\"text-sm font-medium\">{dispute.vendor.name}</p>\n                    <p className=\"text-sm text-gray-600\">{dispute.vendor.email}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Admin Notes */}\n          {dispute.adminNotes && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Admin Notes</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-700 bg-yellow-50 p-3 rounded-md\">\n                  {dispute.adminNotes}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Resolution Details */}\n          {dispute.resolutionNotes && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Resolution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium text-gray-500\">\n                    Resolution Type: {dispute.resolution?.replace(/_/g, ' ')}\n                  </p>\n                  <p className=\"text-sm text-gray-700 bg-green-50 p-3 rounded-md\">\n                    {dispute.resolutionNotes}\n                  </p>\n                  {dispute.resolutionAmount && (\n                    <p className=\"text-sm font-medium text-gray-500\">\n                      Amount: {formatCurrency(dispute.resolutionAmount)}\n                    </p>\n                  )}\n                  {dispute.resolutionDate && (\n                    <p className=\"text-sm font-medium text-gray-500\">\n                      Resolved: {format(new Date(dispute.resolutionDate), 'PPP')}\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Timeline Tab */}\n        <TabsContent value=\"timeline\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"h-5 w-5\" />\n                <span>Dispute Timeline</span>\n              </CardTitle>\n              <CardDescription>\n                Complete history of actions taken on this dispute\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {dispute.timeline && dispute.timeline.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {dispute.timeline.map((entry) => (\n                    <div key={entry.id} className=\"border-l-2 border-gray-200 pl-4 pb-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium text-gray-900\">{entry.action}</h4>\n                        <span className=\"text-sm text-gray-500\">\n                          {format(new Date(entry.createdAt), 'MMM dd, yyyy HH:mm')}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-1\">{entry.description}</p>\n                      {entry.performedByName && (\n                        <p className=\"text-xs text-gray-500\">\n                          by {entry.performedByName} ({entry.performedByType})\n                        </p>\n                      )}\n                      {entry.notes && (\n                        <p className=\"text-xs text-gray-600 mt-1 italic\">\n                          Note: {entry.notes}\n                        </p>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Clock className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No timeline entries available</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Evidence Tab */}\n        <TabsContent value=\"evidence\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"h-5 w-5\" />\n                <span>Evidence & Documents</span>\n              </CardTitle>\n              <CardDescription>\n                Files and documents related to this dispute\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* File Upload */}\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6\">\n                <input\n                  type=\"file\"\n                  multiple\n                  onChange={(e) => e.target.files && handleFileUpload(e.target.files)}\n                  className=\"hidden\"\n                  id=\"evidence-upload\"\n                />\n                <label\n                  htmlFor=\"evidence-upload\"\n                  className=\"cursor-pointer flex flex-col items-center space-y-2\"\n                >\n                  <Upload className=\"h-8 w-8 text-gray-400\" />\n                  <span className=\"text-sm font-medium text-gray-900\">\n                    Click to upload evidence\n                  </span>\n                  <span className=\"text-xs text-gray-500\">\n                    PDF, images, documents (max 5MB each)\n                  </span>\n                </label>\n              </div>\n\n              {/* Evidence List */}\n              {dispute.evidence && dispute.evidence.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {dispute.evidence.map((evidence) => (\n                    <div key={evidence.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <FileText className=\"h-5 w-5 text-gray-500\" />\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">\n                            {evidence.filename}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            {(evidence.size / 1024).toFixed(1)} KB • \n                            Uploaded {format(new Date(evidence.uploadedAt), 'MMM dd, yyyy')}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => window.open(evidence.url, '_blank')}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            const link = document.createElement('a');\n                            link.href = evidence.url;\n                            link.download = evidence.filename;\n                            link.click();\n                          }}\n                        >\n                          <Download className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteEvidence(evidence.id)}\n                          className=\"text-red-600 hover:text-red-800\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No evidence uploaded yet</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Communication Tab */}\n        <TabsContent value=\"communication\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <MessageCircle className=\"h-5 w-5\" />\n                <span>Communication</span>\n              </CardTitle>\n              <CardDescription>\n                Add responses and communicate with parties\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Add Response Form */}\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"response\">Add Response</Label>\n                <Textarea\n                  id=\"response\"\n                  value={newResponse}\n                  onChange={(e) => setNewResponse(e.target.value)}\n                  placeholder=\"Type your response here...\"\n                  rows={4}\n                />\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"file\"\n                    multiple\n                    onChange={(e) => setSelectedFiles(e.target.files)}\n                    className=\"text-sm\"\n                  />\n                </div>\n                <Button\n                  onClick={handleAddResponse}\n                  disabled={!newResponse.trim() || addResponseMutation.isLoading}\n                >\n                  {addResponseMutation.isLoading ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Send className=\"h-4 w-4 mr-2\" />\n                  )}\n                  Send Response\n                </Button>\n              </div>\n\n              {/* Previous Communications would be shown here */}\n              <div className=\"text-center py-8 text-gray-500\">\n                <MessageCircle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>Communication history will appear here</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Actions Tab */}\n        <TabsContent value=\"actions\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Resolution Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-5 w-5\" />\n                  <span>Resolve Dispute</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label>Resolution Type</Label>\n                  <Select\n                    value={resolutionData.resolution}\n                    onValueChange={(value: DisputeResolution) =>\n                      setResolutionData(prev => ({ ...prev, resolution: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"full_refund\">Full Refund</SelectItem>\n                      <SelectItem value=\"partial_refund\">Partial Refund</SelectItem>\n                      <SelectItem value=\"replacement\">Replacement</SelectItem>\n                      <SelectItem value=\"store_credit\">Store Credit</SelectItem>\n                      <SelectItem value=\"no_action\">No Action</SelectItem>\n                      <SelectItem value=\"vendor_warning\">Vendor Warning</SelectItem>\n                      <SelectItem value=\"vendor_penalty\">Vendor Penalty</SelectItem>\n                      <SelectItem value=\"escalate_to_legal\">Escalate to Legal</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                {(resolutionData.resolution === 'full_refund' || resolutionData.resolution === 'partial_refund') && (\n                  <div className=\"space-y-2\">\n                    <Label>Refund Amount</Label>\n                    <Input\n                      type=\"number\"\n                      value={resolutionData.refundAmount || ''}\n                      onChange={(e) =>\n                        setResolutionData(prev => ({\n                          ...prev,\n                          refundAmount: parseFloat(e.target.value) || undefined,\n                        }))\n                      }\n                      placeholder=\"Enter refund amount\"\n                    />\n                  </div>\n                )}\n                \n                <div className=\"space-y-2\">\n                  <Label>Resolution Notes</Label>\n                  <Textarea\n                    value={resolutionData.resolutionNotes}\n                    onChange={(e) =>\n                      setResolutionData(prev => ({ ...prev, resolutionNotes: e.target.value }))\n                    }\n                    placeholder=\"Explain the resolution decision...\"\n                    rows={3}\n                  />\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <label className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={resolutionData.notifyCustomer}\n                      onChange={(e) =>\n                        setResolutionData(prev => ({ ...prev, notifyCustomer: e.target.checked }))\n                      }\n                    />\n                    <span className=\"text-sm\">Notify Customer</span>\n                  </label>\n                  <label className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={resolutionData.notifyVendor}\n                      onChange={(e) =>\n                        setResolutionData(prev => ({ ...prev, notifyVendor: e.target.checked }))\n                      }\n                    />\n                    <span className=\"text-sm\">Notify Vendor</span>\n                  </label>\n                </div>\n                \n                <Button\n                  onClick={handleResolve}\n                  disabled={!resolutionData.resolutionNotes || resolveDisputeMutation.isLoading}\n                  className=\"w-full\"\n                >\n                  {resolveDisputeMutation.isLoading ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  )}\n                  Resolve Dispute\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Escalation Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Flag className=\"h-5 w-5\" />\n                  <span>Escalate Dispute</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label>Escalation Reason</Label>\n                  <Input\n                    value={escalationData.escalationReason}\n                    onChange={(e) =>\n                      setEscalationData(prev => ({ ...prev, escalationReason: e.target.value }))\n                    }\n                    placeholder=\"Brief reason for escalation\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label>Escalation Notes</Label>\n                  <Textarea\n                    value={escalationData.escalationNotes}\n                    onChange={(e) =>\n                      setEscalationData(prev => ({ ...prev, escalationNotes: e.target.value }))\n                    }\n                    placeholder=\"Detailed notes about why this needs escalation...\"\n                    rows={3}\n                  />\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <label className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={escalationData.requiresLegalReview}\n                      onChange={(e) =>\n                        setEscalationData(prev => ({ ...prev, requiresLegalReview: e.target.checked }))\n                      }\n                    />\n                    <span className=\"text-sm\">Requires Legal Review</span>\n                  </label>\n                  <label className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={escalationData.requiresManagerApproval}\n                      onChange={(e) =>\n                        setEscalationData(prev => ({ ...prev, requiresManagerApproval: e.target.checked }))\n                      }\n                    />\n                    <span className=\"text-sm\">Manager Approval</span>\n                  </label>\n                </div>\n                \n                <Button\n                  onClick={handleEscalate}\n                  disabled={!escalationData.escalationReason || !escalationData.escalationNotes || escalateDisputeMutation.isLoading}\n                  variant=\"destructive\"\n                  className=\"w-full\"\n                >\n                  {escalateDisputeMutation.isLoading ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Flag className=\"h-4 w-4 mr-2\" />\n                  )}\n                  Escalate Dispute\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}